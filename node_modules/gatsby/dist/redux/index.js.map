{"version":3,"sources":["../../src/redux/index.js"],"names":["Redux","require","_","fs","mitt","stringify","emitter","reducers","objectToMap","obj","map","Map","Object","keys","forEach","key","set","mapToObject","value","initialState","file","readFileSync","process","cwd","Buffer","isBuffer","JSON","parse","staticQueryComponents","components","nodes","nodesByType","node","type","internal","has","get","id","e","store","createStore","combineReducers","applyMiddleware","multi","dispatch","next","action","Array","isArray","filter","Boolean","saveState","env","DANGEROUSLY_DISABLE_OOM","Promise","resolve","state","getState","pickedState","pick","stringified","writeFile","exports","subscribe","lastAction","emit"],"mappings":"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","sourcesContent":["const Redux = require(`redux`)\nconst _ = require(`lodash`)\nconst fs = require(`fs-extra`)\nconst mitt = require(`mitt`)\nconst stringify = require(`json-stringify-safe`)\n\n// Create event emitter for actions\nconst emitter = mitt()\n\n// Reducers\nconst reducers = require(`./reducers`)\n\nconst objectToMap = obj => {\n  let map = new Map()\n  Object.keys(obj).forEach(key => {\n    map.set(key, obj[key])\n  })\n  return map\n}\n\nconst mapToObject = map => {\n  const obj = {}\n  for (let [key, value] of map) {\n    obj[key] = value\n  }\n  return obj\n}\n\n// Read from cache the old node data.\nlet initialState = {}\ntry {\n  const file = fs.readFileSync(`${process.cwd()}/.cache/redux-state.json`)\n  // Apparently the file mocking in node-tracking-test.js\n  // can override the file reading replacing the mocked string with\n  // an already parsed object.\n  if (Buffer.isBuffer(file) || typeof file === `string`) {\n    initialState = JSON.parse(file)\n  }\n  if (initialState.staticQueryComponents) {\n    initialState.staticQueryComponents = objectToMap(\n      initialState.staticQueryComponents\n    )\n  }\n  if (initialState.components) {\n    initialState.components = objectToMap(initialState.components)\n  }\n  if (initialState.nodes) {\n    initialState.nodes = objectToMap(initialState.nodes)\n\n    initialState.nodesByType = new Map()\n    initialState.nodes.forEach(node => {\n      const { type } = node.internal\n      if (!initialState.nodesByType.has(type)) {\n        initialState.nodesByType.set(type, new Map())\n      }\n      initialState.nodesByType.get(type).set(node.id, node)\n    })\n  }\n} catch (e) {\n  // ignore errors.\n}\n\nconst store = Redux.createStore(\n  Redux.combineReducers({ ...reducers }),\n  initialState,\n  Redux.applyMiddleware(function multi({ dispatch }) {\n    return next => action =>\n      Array.isArray(action)\n        ? action.filter(Boolean).map(dispatch)\n        : next(action)\n  })\n)\n\n// Persist state.\nfunction saveState() {\n  if (process.env.DANGEROUSLY_DISABLE_OOM) {\n    return Promise.resolve()\n  }\n\n  const state = store.getState()\n  const pickedState = _.pick(state, [\n    `nodes`,\n    `status`,\n    `componentDataDependencies`,\n    `jsonDataPaths`,\n    `components`,\n    `staticQueryComponents`,\n  ])\n\n  pickedState.staticQueryComponents = mapToObject(\n    pickedState.staticQueryComponents\n  )\n  pickedState.components = mapToObject(pickedState.components)\n  pickedState.nodes = pickedState.nodes ? mapToObject(pickedState.nodes) : []\n  const stringified = stringify(pickedState, null, 2)\n  return fs.writeFile(`${process.cwd()}/.cache/redux-state.json`, stringified)\n}\n\nexports.saveState = saveState\n\nstore.subscribe(() => {\n  const lastAction = store.getState().lastAction\n  emitter.emit(lastAction.type, lastAction)\n})\n\n/** Event emitter */\nexports.emitter = emitter\n\n/** Redux store */\nexports.store = store\n"],"file":"index.js"}